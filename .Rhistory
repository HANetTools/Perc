#' @examples
#' # convert an edgelist to conflict matrix
#' confmatrix <- as.conflictmat(sampleEdgelist)
#' # find win-loss probability matrix
#' perm2 <- conductance(confmatrix, 2)
#' # plotting
#' plotConfmat(perm2$p.hat)
plotConfmat = function(conf.mat, ordering = NA, labels = FALSE, ...){
# making sure input is correct
if (!(is.matrix(testMatrix2))) {
stop("conf.mat should be a matrix.")
}
if(length(rownames(conf.mat)) == 0){
labels = FALSE
}
if(length(ordering) == 1){
ordering = 1:ncol(conf.mat)
}
conf.mat.ord = conf.mat[ordering, ordering]
ramp = colorRamp(c("white","blue", "orange", "red"))
colors = rgb(ramp(seq(0, 1, length = 1000)), maxColorValue = 255)
N = nrow(conf.mat)
tickdist = ifelse(N > 70, 20, ifelse(N > 30, 10, 5))
if(labels == FALSE){
low = N - floor(N/tickdist)*tickdist + 1
x.values = rev(seq(tickdist,N,tickdist))
y.values = seq(low, N, tickdist)
lbls = rev(seq(tickdist, N, tickdist))
}
else{
lbls = rownames(conf.mat.ord)
x.values = 1:N
y.values = rev(1:N)
}
lattice::levelplot(t(conf.mat.ord)[,ncol(conf.mat.ord):1], col.regions = colors,
xlab = "Loser", ylab = "Winner",
scales=list(
x=list(labels=lbls, at = x.values, rot = ifelse(labels == TRUE, 90, 0)),
y=list(labels=lbls, at = y.values)
)
)
}
plotConfmat(edgelist1)
devtools::test()
devtools::test()
a <- plotConfmat(testMatrix2, ordering = TRUE)
str(a)
a <- plotConfmat(testMatrix2, ordering = TRUE, labels = TRUE)
str(a)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
?replicate
a
a <- conductance(testMatrix2, 2)
a
b <- simRankOrder(perm2$p.hat, num = 2, kmax = 2)
b <- simRankOrder(a$p.hat, num = 2, kmax = 2)
str(b)
str(a[[2]])
class(a[[2]])
a[[2]] <0
any(a[[2]] < 0)
devtools::test()
conductanceOutput <- conductance(testMatrix2, 2)
str(conductanceOutput[[2]])
conductanceOutput[[2]][2,5]
sample(conductanceOutput[[2]], 1)
devtools::test()
devtools::test()
conductanceOutput[[2]][1,5] <- -1
conductanceOutput
simRankOrder(conductanceOutput[[2]], num = 2, kmax = 5)
any(conductanceOutput[[2]]) < 0
devtools::test()
conductanceOutput <- conductance(testMatrix2, 2)
str(simRankOrder)
str(simRankOrder(conductanceOutput[[2]], num = 2, kmax = 5))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
dyadicLongConverter(matrixOutput)
devtools::test()
devtools::test()
set.seed(1)
edgelist1 <- data.frame(col1 = sample(letters[1:15], 200, replace = TRUE),
col2 = sample(letters[1:15], 200, replace = TRUE),
stringsAsFactors = FALSE)
edgelist1 <- edgelist1[-which(edgelist1$col1 == edgelist1$col2), ]
testMatrix1 <- as.conflictmat(edgelist1)[[2]]
str(dyadicLongConverter(testMatrix1))
edgelist1 <- data.frame(col1 = sample(letters[1:15], 200, replace = TRUE),
col2 = sample(letters[1:15], 200, replace = TRUE),
stringsAsFactors = FALSE)
edgelist1 <- edgelist1[-which(edgelist1$col1 == edgelist1$col2), ]
testMatrix1 <- as.conflictmat(edgelist1)[[2]]
testMatrix1
testMatrix <- conductance(sampleMatrix)[[2]]
sampleMatrix <- as.conflictmat(edgelist1)
testMatrix <- conductance(sampleMatrix)[[2]]
testMatrix <- conductance(sampleMatrix, 2)[[2]]
str(dyadicLongConverter(testMatrix))
devtools::test
devtools::test()
devtools::test()
Perc::transitivity
transivity()
transitivity()
transitivity(sampleMatrix)
Perc::transitivity(sampleMatrix)
devtools::test()
devtools::test()
devtools::test()
edgelist1 <- data.frame(col1 = sample(letters[1:15], 200, replace = TRUE),
col2 = sample(letters[1:15], 200, replace = TRUE),
stringsAsFactors = FALSE)
edgelist1 <- edgelist1[-which(edgelist1$col1 == edgelist1$col2), ]
sampleMatrix <- as.conflictmat(edgelist1)
library(Perc)
set.seed(1)
edgelist1 <- data.frame(col1 = sample(letters[1:15], 200, replace = TRUE),
col2 = sample(letters[1:15], 200, replace = TRUE),
stringsAsFactors = FALSE)
edgelist1 <- edgelist1[-which(edgelist1$col1 == edgelist1$col2), ]
sampleMatrix <- as.conflictmat(edgelist1)
testMatrix <- conductance(sampleMatrix, 2)[[2]]
devtools::test()
devtools::test()
devtools::build()
devtools::test()
set.seed(1)
edgelist1 <- data.frame(col1 = sample(letters[1:15], 200, replace = TRUE),
col2 = sample(letters[1:15], 200, replace = TRUE),
stringsAsFactors = FALSE)
edgelist1 <- edgelist1[-which(edgelist1$col1 == edgelist1$col2), ]
sampleMatrix <- as.conflictmat(edgelist1)
testMatrix <- conductance(sampleMatrix, 2)[[2]]
str(dyadicLongConverter(testMatrix))
devtools::test()
dim(dyadicLongConverter(testMatrix))
devtools::test()
longData <- dyadicLongConverter(testMatrix)
dim(longData)
dim(longData)[2]
devtools::test()
devtools::test()
set.seed(1)
edgelist1 <- data.frame(col1 = sample(letters[1:15], 200, replace = TRUE),
col2 = sample(letters[1:15], 200, replace = TRUE),
stringsAsFactors = FALSE)
edgelist1 <- edgelist1[-which(edgelist1$col1 == edgelist1$col2), ]
sampleMatrix <- as.conflictmat(edgelist1)
testMatrix <- conductance(sampleMatrix, 2)[[2]]
longData <- dyadicLongConverter(testMatrix)
ncol(longData)
devtools::test()
str(ncol(longData))
devtools::test()
longData
ncol(longData)
dim(longData)[2]
class(ncol(longData))
typeof(ncol(longData))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
readRDS("/Users/JianJin/Dropbox/Rfile/Perc/tests/testthat/ncoldyadiclong.rds")
testMatrix
set.seed(1)
edgelist1 <- data.frame(col1 = sample(letters[1:15], 200, replace = TRUE),
col2 = sample(letters[1:15], 200, replace = TRUE),
stringsAsFactors = FALSE)
edgelist1 <- edgelist1[-which(edgelist1$col1 == edgelist1$col2), ]
sampleMatrix <- as.conflictmat(edgelist1)
testMatrix <- conductance(sampleMatrix, 2)[[2]]
testMatrix
length(dyadicLongConverter(testMatrix))
devtools::test()
readRDS("/Users/JianJin/Dropbox/Rfile/Perc/tests/testthat/ncoldyadiclong.rds")
ncol(dyadicLongConverter(testMatrix))
ncol(dyadicLongConverter(testMatrix))
dyadicLongConverter(testMatrix)
devtools::test()
longData <- valueConverter(testMatrix)
vcOutput <- valueConverter(testMatrix)
str(vcOutput)
class(vcOutput)
devtools::test()
iwOutput <- individualWinProb(testMatrix)
iwOutput
devtools::test()
devtools::test()
names(iwOutput)
length(names(iwOutput))
devtools::test()
c("ID", "Mean", "SD")
print(c("ID", "Mean", "SD"))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
# To do: when "no pathways found starting at ID", return a character vector, instead of a list.
#' find all paths of a certain length for an individual
#'
#' \code{findIDpaths} identifies all unique win-loss paths of order \eqn{(len - 1)} beginning at selected subject (given by \code{ID})
#'
#' @param conf an N-by-N conflict matrix whose \code{(i,j)}th element is the number of times i defeated j
#' @param ID a numeric or character object of length 1. the subject at the beginning of each win-loss path.
#' @param len a positive integer of length 1 greater than 2. the length of the win-loss paths to be identified (\eqn{len = order + 1})
#' @return return all win-loss paths of \code{length(len)} beginning at \code{ID}
#'
#' @seealso \code{\link{findAllPaths}} \code{\link{countPaths}}
#' @examples
#' confmatrix <- as.conflictmat(sampleEdgelist)
#' path38891 <- findIDpaths(confmatrix, ID = 38891, len = 2)
findIDpaths = function(conf, ID, len = 2){
# making sure conf is of conf.mat
if (!("conf.mat" %in% class(conf))){
stop("Turn conf into a 'conf.mat' using 'as.conflictmat'.")
}
# making sure that len is of correct format
if (len < 2) stop("len should be no smaller than 2.")
if (len > 6) stop("len should be no greater than 6.")
if(len %% as.integer(len) != 0) {
stop("'len' needs to be an integer.")
}
if (!(as.character(ID) %in% row.names(conf))) {
stop("ID not found in the conflict matrix. Making sure the ID and the conflict matrix are correct.")
}
i <- which(row.names(conf) == as.character(ID))
#  if(sum(conf[i,] > 0) == 0) return(matrix(0, 0, len+1))
#  # i = 1
#  #len = 5
#  levels = list()
#  levels[[1]] = which(conf[i,] > 0)  ###? levels[[1]]?
#  for(j in 2:len){
#    levels[[j]] = lapply(unlist(levels[[j-1]]), function(k) which(conf[k,] > 0))
#  }
#  ret = matrix(0, length(unlist(levels[[len]])), len+1)
#  ret[,1] = i
#  ret[,len+1] = unlist(levels[[len]])
#  if(len == 2){
#    ret[,2] = rep(unlist(levels[[1]]), sapply(levels[[2]], length))
#  }
#  for(j in len:2){
#    #j = 4
#    currLengths = sapply(levels[[j]], length)
#    if(j < len){
#      effLengths = numeric(length(currLengths))
#      ctr = 1
#      for(d in 1:length(effLengths)){
#        if(currLengths[d] != 0){
#          effLengths[d] = sum(prevLengths[ctr:(ctr + currLengths[d] - 1)])
#        }
#        else{
#          effLengths[d] = 0
#        }
#        ctr = ctr + currLengths[d]
#      }
#    }
#    else{
#      effLengths = currLengths
#    }
#    if(length(currLengths) == 0){ return(matrix(0, 0, len+1))}
#    ret[,j] = rep(unlist(levels[[j-1]]), effLengths)
#    prevLengths = effLengths
#  }
#  isUnique = apply(ret, MARGIN = 1, function(b) {length(unique(b)) == len + 1})
#  ret[isUnique,]
pathMatrix <- IDpaths(conf, i, len)
if (nrow(pathMatrix) == 0) {
print(paste(
c("no pathways found starting at"),
ID,
sep = " "
))
#return(
#  list(
#    pathMatrix,
#    paste(
#      c("no pathways found starting at"),
#      ID,
#      sep = " "
#      )
#    )
#  )
} else {
pathOutputmatrix <- pathMatrix
for (j in 1:length(pathMatrix)){
pathOutputmatrix[j] <- row.names(conf)[pathMatrix[j]]
}
return(pathOutputmatrix)
}
}
set.seed(1)
edgelist1 <- data.frame(col1 = sample(letters[1:15], 200, replace = TRUE),
col2 = sample(letters[1:15], 200, replace = TRUE),
stringsAsFactors = FALSE)
edgelist1 <- edgelist1[-which(edgelist1$col1 == edgelist1$col2), ]
testMatrix2 <- as.conflictmat(edgelist1)
library(Perc)
testMatrix2 <- as.conflictmat(edgelist1)
testMatrix3 <- testMatrix2
testMatrix3[1,] <- 0
findIDpaths(testMatrix3)
findIDpaths(testMatrix3, "a", len = 2)
devtools::build()
findIDpaths(testMatrix3, "a", len = 2)
devtools::load_all()
findIDpaths(testMatrix3, "a", len = 2)
str(findIDpaths(testMatrix3, "a", len = 2))
message("ABC", "DEF")
suppressMessages(message("ABC"))
message("ABC", "DEF")
devtools::test()
devtools::load_all()
devtools::test()
findIDpaths(testMatrix3, "a", len = 2)
str(findIDpaths(testMatrix3, "a", len = 2))
message("ABC", "DEF")
ID <- a
message("abc", ID)
ID <- "a"
message("abc", ID)
message(paste("abc", ID))
devtools::load_all()
findIDpaths
devtools::build()
devtools::load_all()
findIDpaths()
findIDpaths
devtools::build()
devtools::load_all()
findIDpaths
devtools::build()
library(Perc)
findIDpaths
library(Perc)
findIDpaths()
findIDpaths
library(Perc)
findIDpaths
?sampleEdgelist
confmatrix <- as.conflictmat(sampleEdgelist)
condTestoutput <- bt.test(confmatrix)
library(Perc)
findIDpaths
library(Perc)
findIDpaths()
findIDpaths
library(Perc)
?Perc
??Perc
devtools::load_all()
findIDpaths()
findIDpaths
devtools::test()
set.seed(1)
edgelist1 <- data.frame(col1 = sample(letters[1:15], 200, replace = TRUE),
col2 = sample(letters[1:15], 200, replace = TRUE),
stringsAsFactors = FALSE)
edgelist1 <- edgelist1[-which(edgelist1$col1 == edgelist1$col2), ]
testMatrix2 <- as.conflictmat(edgelist1)
testMatrix3 <- testMatrix2
testMatrix3[1,] <- 0
findIDpaths(testMatrix3, "a", len = 2)
str(findIDpaths(testMatrix3, "a", len = 2))
library(Perc)
?myrecode
library(Perc)
?Perc
??Perc
?myrecode
confmatrix <- as.conflictmat(sampleEdgelist)
condTestoutput <- bt.test(confmatrix)
class(confmatrix)
"conf.mat" %in% class(confmatrix)
sampleEdgelist
confmatrix <- as.conflictmat(sampleEdgelist)
bt <- bradleyTerry(confmatrix)
bt
conf.mat = confmatrix
conf.mat
n = nrow(conf.mat)
n
baseline = 1
mle.d = bradleyTerry(conf.mat, baseline = baseline)
mle.d
cond = conductance(conf.mat, maxLength)
cond = conductance(conf.mat, maxLength = 3)
cond
ls()
ls()
library(Perc)
version("Perc")
print.numeric_version(Perc)
print.numeric_version("Perc")
library(Perc)
?Perc
library(stringr)
?stringr
??stringr
version(stringr)
??ggplot2
Versions(Perc)
versions(Perc)
R.version()
R.Version()
R.Version(Perc)
sessionInfo()
?myrecode
library(Perc)
sessionInfo()
?myrecode
confmatrix <- as.conflictmat(sampleEdgelist)
bt <- bradleyTerry(confmatrix)
condTestoutput <- bt.test(confmatrix)
conductance(confmatrix, maxLength = 3)
conductance(conf.mat, maxLength)
conductance(confmatrix, maxLength = 3)
bt.test(confmatrix)
confmatrix <- as.conflictmat(sampleEdgelist)
condTestoutput <- bt.test(confmatrix)
confmatrix <- as.conflictmat(sampleEdgelist)
conductance(confmatrix, 3)
bt.test
bt.test(confmatrix)
conf
class(conf)
class(conf.mat)
bt.test(confmatrix)
class(confmatrix)
a <- confmatrix
class(a)
browser()
bt.test(confmatrix)
class(confmatrix)
class(conf.mat)
class(conf.mat)
bt.test(confmatrix)
q
quit()
bt.test(confmatrix)
class(conf.mat)
conductance(conf.mat, 3)
bt.test(confmatrix)
class(conf)
conf
"conf.mat" %in% class(conf)
bt.test(confmatrix)
bt.test(confmatrix)
devtools::test()
devtools::test()
confmatrix <- as.conflictmat(sampleEdgelist)
condTestoutput <- bt.test(confmatrix)
warnings()
devtools::test()
devtools::test()
devtools::test()
bt.test(confmatrix)
?myrecode
sessionInfo()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::test()
devtools::document()
confmatrix <- as.conflictmat(sampleEdgelist)
sampleEdgelist
devtools::document()
library(Perc)
?recode
?"Perc"
devtools::load_all()
?myrecode
x <- 1:10
myrecode(1:10, list(c(1:5), c(6:10)), c(1:2))
devtools::document()
devtools::load_all()
?transitivity
library(Perc)
?transitivity
?myrecode
devtools::document()
devtools::document()
devtools::check()
citation("Perc")
devtools::document()
devtools::check()
library(Perc)
dyadicLongConverter
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::test()
devtools::check()
devtools::check()
library(Perc)
